// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  isActive  Boolean  @default(true)
  emailVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile   Profile?
  sessions  Session[]
  userRoles UserRole[]
  organizations OrganizationMember[]
  createdOrganizations Organization[] @relation("OrganizationCreator")

  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  bio         String?
  website     String?
  location    String?
  timezone    String?
  preferences Json?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// Authentication & Sessions
model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  expiresAt    DateTime
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Role-Based Access Control
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Permission[]
  userRoles   UserRole[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  resource    String   // e.g., "user", "post", "comment"
  action      String   // e.g., "create", "read", "update", "delete"
  conditions  Json?    // Additional conditions for the permission
  roleId      String
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([resource, action, roleId])
  @@map("permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// Multi-Tenant Organizations
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  settings    Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  creator     User     @relation("OrganizationCreator", fields: [createdBy], references: [id])

  // Relations
  members     OrganizationMember[]
  projects    Project[]
  resources   Resource[]
  categories  Category[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           MemberRole   @default(MEMBER)
  joinedAt       DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

// Project Management
model Project {
  id             String   @id @default(cuid())
  name           String
  description    String?
  status         ProjectStatus @default(DRAFT)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("projects")
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

// Resource Management
model Resource {
  id             String   @id @default(cuid())
  name           String
  description    String?
  type           ResourceType
  url            String?
  filePath       String?
  metadata       Json?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  categoryId     String?
  category       Category? @relation(fields: [categoryId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("resources")
}

enum ResourceType {
  DOCUMENT
  IMAGE
  VIDEO
  LINK
  FILE
  API
}

model Category {
  id             String   @id @default(cuid())
  name           String
  description    String?
  color          String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parentId       String?
  parent         Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children       Category[] @relation("CategoryHierarchy")
  resources      Resource[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("categories")
}
